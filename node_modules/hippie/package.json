{
  "name": "hippie",
  "version": "0.3.0",
  "description": "Simple end-to-end API testing",
  "main": "./lib/hippie.js",
  "homepage": "https://github.com/vesln/hippie",
  "scripts": {
    "test": "hydro",
    "pretest": "jshint .",
    "coverage": "istanbul cover _hydro"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/vesln/hippie"
  },
  "devDependencies": {
    "chai": "~1.8.1",
    "jshint": "~2.3.0",
    "istanbul": "~0.1.44",
    "express": "~3.4.4",
    "hydro": "~0.8.7",
    "hydro-bdd": "~0.1.0",
    "hydro-dot": "~1.0.5",
    "hydro-clean-stacks": "~0.1.0",
    "hydro-chai": "~0.1.3"
  },
  "author": {
    "name": "Veselin Todorov",
    "email": "hi@vesln.com"
  },
  "license": "MIT",
  "dependencies": {
    "assertion-error": "~1.0.0",
    "request": "~2.27.0",
    "qs": "~0.6.5",
    "pathval": "0.0.1",
    "deep-eql": "~0.1.3"
  },
  "readme": "[![NPM version](https://badge.fury.io/js/hippie.png)](http://badge.fury.io/js/hippie)\n[![Build Status](https://secure.travis-ci.org/vesln/hippie.png)](http://travis-ci.org/vesln/hippie)\n[![Code Climate](https://codeclimate.com/github/vesln/hippie.png)](https://codeclimate.com/github/vesln/hippie)\n\n![hippie](http://i.imgur.com/ZEkuNZG.png)\n\n## Synopsis\n\nThin request wrapper that enables powerful and intuitive API testing.\n\n## Features\n\n* Intuitive and consistent API\n* Built-in and custom expectations\n* Support for custom parsers and serializers\n* Easy to extend\n* Middlewares\n* Works great with any test runner\n\n## Examples\n\n```\nvar api = require('hippie');\n```\n\n### Hello world\n\n```js\nhippie()\n.header(\"User-Agent\", \"hippie\")\n.json()\n.get('https://api.github.com/users/vesln')\n.expectStatus(200)\n.end(function(err, res, body) {\n  if (err) throw err;\n});\n```\n\n### Expectations\n\n```js\nhippie()\n.json()\n.base('http://localhost:1234')\n.get('/users/vesln')\n.expectStatus(200)\n.expectHeader('Content-Type', 'application/json; charset=utf-8')\n.expectValue('username', 'vesln')\n.expectValue('repos[0].name', 'jsmd')\n.expectBody({\n  username: 'vesln',\n  repos: [\n    { name: 'jsmd' },\n    { name: 'hippie' },\n  ]\n})\n.expectBody(/vesln/g)\n.end(function(err, res, body) {\n  if (err) throw err;\n  process.exit(0);\n});\n```\n\n### Middlewares\n\n```js\nhippie()\n.json()\n.use(function(options, next) {\n  // modify the options for `request` here\n  next(options);\n})\n.get('https://api.github.com/users/vesln')\n.end(function(err, res, body) {\n  if (err) throw err;\n});\n```\nWith middlewares you can modify the options passed to `request`. Here is an\nexample how you could persist the cookies across multiple requests:\n\n```js\nhippie(app)\n.get('/')\n.use(persistCookies)\n.end(function() {});\n\nfunction persistCookies(opts, next) {\n  opts.jar = true;\n  next(opts);\n}\n```\n\n### Serializers and parsers\n\n```js\nvar xml = require('my-xml-library');\n\nhippie()\n.serializer(function(params, fn) {\n  var err = new Error('Things went wrong');\n  var res = xml.objectToXml(params);\n  fn(err, res);\n})\n.parser(function(body, fn) {\n  var err = new Error('Things went wrong');\n  var res = xml.xmlToObject(body);\n  fn(err, res);\n})\n.get('https://api.github.com/users/vesln.xml')\n.expectStatus(200)\n.end(function(err, res, body) {\n  if (err) throw err;\n});\n```\n\n### AssertionError configurations\n\nSimilar to Chai.js and other frameworks, you can enable `showDiff`.\n\n```js\nvar hippie = require('hippie');\nhippie.assert.showDiff = true;\n```\n\n![showDiff](http://i.imgur.com/hsR8Kbs.png)\n\n### DRY\n\nSince most of the time your test setup is going to be the same, you can simply\ncreate a helper function for your tests that will take care of the repetitive\nsetup:\n\n```js\nvar hippie = require('hippie');\n\nfunction api() {\n  return hippie()\n    .json()\n    .serializer(customSerializer)\n    .parser(customParser)\n    .use(somethingSpecial)\n    .base('http://localhost:3000/api/v1')\n    .auth('user', 'pass')\n    .expect(somethingRepetable);\n}\n```\nLater on:\n\n```js\ntest('my awesome api', function(done) {\n  api()\n  .get('/users')\n  .expectStatus(200)\n  .end();\n});\n```\n\n## API\n\n### #timeout\n\nConfigure a timeout for the HTTP request.\n\n```js\nhippie()\n.timeout(1000)\n.end(fn);\n```\n\n### #qs\n\nConvert an object to query string values:\n\n```js\nhippie()\n.qs({ foo: 'bar' })\n.end(fn);\n```\n\n### #base\n\nConfigure a base URL, useful when testing the same API endpoint.\n\n```js\nhippie()\n.base('https://api.github.com')\n.get('/users/vesln')\n.end(fn);\n```\n\n### #url\n\nSet the URL for the HTTP request. Used internally by `get`, `put` etc. and\nit should be used in combination with `method`.\n\n```js\nhippie()\n.url('https://api.github.com')\n.method('GET')\n.end(fn);\n```\n\n### #method\n\nConfigure the HTTP method. Used internally by `get`, `put` etc.\n\n```js\nhippie()\n.url('https://api.github.com')\n.method('OPTIONS')\n.end(fn);\n```\n\n### #header\n\nSet a request header.\n\n```js\nhippie()\n.header('Content-Type', 'application/json')\n.send({ some: 'data' })\n.end(fn);\n```\n\n### #json\n\nHelper method for:\n\n- Content-Type: application/json\n- Accept: application/json\n- Serializer: json\n- Parser: json\n\n```js\nhippie()\n.json()\n.get('https://github.com/vesln.json', fn);\n```\n\n### #form\n\nHelper method for:\n\n- Content-Type: application/x-www-form-urlencoded\n- Serializer: urlencoded\n\n```js\nhippie()\n.form()\n.patch('https://api.mindbloom.com/users/vesln');\n.send({ timezone: 'UTC' }\n.end();\n```\n\n### #serializer\n\nConfigure a request body serializer.\n\n```js\nhippie()\n.serializer(function(params, fn) {\n  var err = new Error('Things went wrong');\n  var res = xml.objectToXml(params);\n  fn(err, res);\n});\n```\n\n### #parser\n\nConfigure a response body parser.\n\n```js\nhippie()\n.parser(function(body, fn) {\n  var err = new Error('Things went wrong');\n  var res = xml.xmlToObject(body);\n  fn(err, res);\n});\n```\n\n### #send\n\nSet request body.\n\n```js\nhippie()\n.json()\n.patch('https://api.mindbloom.com/users/vesln');\n.send({ timezone: 'UTC' }\n.end();\n```\n\n### #auth\n\nSet Basic Auth credentials.\n\n```js\nhippie()\n.auth('user', 'password')\n.patch('https://api.mindbloom.com/users/vesln');\n.send({ timezone: 'UTC' }\n.end();\n```\n\n### #use\n\nRegister a middleware that will be executed before the HTTP request.\n\n```js\nhippie()\n.json()\n.use(function(options, next) {\n  // modify the options for `request` here\n  // do other suff\n  next(options);\n})\n.get('https://api.github.com/users/vesln')\n.end(fn);\n```\n\n### #get, #del, #post, #put, #patch, #head\n\nHelper method for:\n\n- Method: `method`\n- URL: `url`\n- End: `fn` [optional]\n\n```js\nhippie()\n.get('https://api.github.com/users/vesln')\n.end(fn);\n```\n\nOr if you want to execute the test immediately:\n\n```js\nhippie()\n.get('https://api.github.com/users/vesln', fn);\n```\n\n### #expectStatusCode, #expectStatus, #expectCode\n\nSet a response status code expectation.\n\n```js\nhippie()\n.json()\n.get('https://api.github.com/users/vesln')\n.expectStatus(200)\n.end(fn);\n```\n\n### #expectHeader\n\nSet a response header expectation.\n\n```js\nhippie()\n.json()\n.get('https://api.github.com/users/vesln')\n.expectHeader('Content-Type', 'application/json; charset=utf-8')\n.expectHeader('X-API-LIMIT', 3)\n.end(fn);\n```\n\n### #expectValue\n\nRegister a string path expectation.\n\n```js\nhippie()\n.json()\n.get('https://api.github.com/users/vesln')\n.expectValue('details.company', 'Awesome.io')\n.expectValue('repos[0].name', 'hippie')\n.end(fn);\n```\n\nFor more information about string paths visit\n[pathval](https://github.com/chaijs/pathval).\n\n### #expectBody\n\nStrict expectations:\n\n```js\nhippie()\n.get('https://api.github.com/users/vesln')\n.expectBody('{ \"username\": \"vesln\" }')\n.end(fn);\n```\n\nRegular expression expectations:\n\n```js\nhippie()\n.get('https://api.github.com/users/vesln')\n.expectBody(/vesln/)\n.end(fn);\n```\n\nObject/array expectations:\n\n```js\nhippie()\n.get('https://api.github.com/users/vesln')\n.expectBody({ username: 'vesln' })\n.end(fn);\n```\n\n### #expect\n\nRegister a custom expectation.\n\n```js\nhippie()\n.get('https://api.github.com/users/vesln')\n.expect(function(res, body, next) {\n  var err = assertSomething;\n  next(err);\n})\n.end(fn);\n```\n\n### #end\n\nExecute the HTTP request and the tests.\n\n```js\nhippie()\n.json()\n.get('https://api.github.com/users/vesln')\n.expectValue('details.company', 'Awesome.io')\n.expectValue('repos[0].name', 'hippie')\n.end(fn);\n```\n\n### #app\n\nFire up an HTTP app and set its address as a base URL.\nAlso works with HTTP handler functions `function(req res){}`.\n\n```js\nhippie(expressApp)\n.get('/')\n.end(fn);\n```\n\n```js\nhippie()\n.app(function(req, res) {\n  res.end('Bye');\n})\n.get('/')\n.end(fn);\n```\n\n## Installation\n\n```bash\nnpm install hippie\n```\n\n## Tests\n\n### Running the tests\n\n```bash\n$ npm test\n```\n\n### Test coverage\n\n```bash\n$ npm run-script coverage\n```\n\n## Alternative projects\n\n- [supertest](https://github.com/visionmedia/supertest)\n- [APIeasy](https://github.com/flatiron/api-easy)\n- [chai-http](https://github.com/chaijs/chai-http)\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Veselin Todorov <hi@vesln.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/vesln/hippie/issues"
  },
  "_id": "hippie@0.3.0",
  "_from": "hippie@^0.3.0"
}
